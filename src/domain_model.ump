// Cover all features from feature list
// Show concepts, attributes, relationships
// DO NOT include operations
// DO NOT include validation checks using before/after

namespace ca.mcgill.ecse223.climbsafe.model;

class ClimbSafe {
	// Contains singleton? admin class (multi 1)
	// singleton isn't needed since it's 1--1 with the application already
	// also attributes will then have to be lazy
	1 <@>- 1 Admin administrator;
	
	// Contains ClimbingSeason class
		// Contains members/guides
		// Contains reservations, etc
	
}

class User {
	// How to make username both unique and immutable?
	// option 1: do not provide setUsername() in the GUI
	unique username;
	password;
	phoneNumber;
}

class Admin {
	isA User;
	username = "admin@nmc.nt";
	password = "admin";
}

class Guide {
	isA User;
	lazy immutable weeklyCost;
}

class Member {
	isA User;
	Integer noWeeks;
	Boolean guide;
	Boolean hotelStay;
	// equipment: List
	
	1 -- * Reservation reservations;
}

class Hotel {
	// any additional attribute properties?
	
	name;
	address;
	rating;
}

class RentableItem {
	abstract;
	Integer cost;
	Integer discountPrice;
}

class Equipment {
	isA RentableItem;
}

class Bundle {
	isA RentableItem;
	1 -- * Equipment equipments;
}

class Reservation {
	// Hired guide
	// Rented equipment
	// Hotel stay
	// Total cost = {
	Integer week;
}


